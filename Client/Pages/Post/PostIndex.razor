@page "/postindex"

@using EventSpaceUI.Client.Utilities
@using System.Text
@using System.Security.Claims
@inject HttpClient HttpClient
@inject IApiService _apiService
@inject HttpClient Http

<div class="container-fluid p-4 mt-5">
	<!-- Sidebar -->
	<div class="row pb-5">
		<div class="col-md-3 side-section p-5 pt-5">
			<div>
				<div class="divider mt-2 mb-2"></div>
				<h2 class="fs--heading-2"><i class="fas fa-rocket pe-3"></i><span>EventSpace</span></h2>
				<div class="divider mt-2 mb-2"></div>
			</div>
			<div class="pt-5">
				<div class="pb-3">
					<button type="button" class="post-btn post-btn-fill w-100" data-bs-toggle="modal" data-bs-target="#photoModal">
						<i class="fas fa-upload"></i> <span>Upload photo</span>
					</button>
				</div>
				<div class="pb-3">
					<button type="button" class="post-btn post-btn-fill w-100" data-bs-toggle="modal" data-bs-target="#blogModal">
						<i class="fas fa-pen"></i> <span>Write blog</span>
					</button>
				</div>
				<div class="pb-3">
					<button type="button" class="post-btn post-btn-fill w-100" @onclick="NavigateToPlaylistPage">
						<i class="fas fa-music"></i> <span>Create playlist</span>
					</button>
				</div>

			</div>
			<div class="pt-5 pb-5">
				<div class="divider mb-5"></div>
				<div class="divider mt-5"></div>
			</div>
		</div>

		<!-- Main Section -->
		<div class="col-md-6 ps-5 pe-5 pb-5 main-section border-gray">
			<!-- Nav Tabs -->
			<ul class="nav nav-tabs nav-tabs-custom mt-4" id="myTab" role="tablist">
				<li class="nav-item nav-item-custom" role="presentation">
					<button class="nav-link nav-link-custom active" id="photo-tab" data-bs-toggle="tab" data-bs-target="#photo-tab-pane" type="button" role="tab" aria-controls="photo-tab-pane" aria-selected="true">Photo</button>
				</li>
				<li class="nav-item nav-item-custom" role="presentation">
					<button class="nav-link nav-link-custom" id="blog-tab" data-bs-toggle="tab" data-bs-target="#blog-tab-pane" type="button" role="tab" aria-controls="blog-tab-pane" aria-selected="false">Blog</button>
				</li>
				<li class="nav-item nav-item-custom" role="presentation">
					<button class="nav-link nav-link-custom" id="playlist-tab" data-bs-toggle="tab" data-bs-target="#playlist-tab-pane" type="button" role="tab" aria-controls="Playlist-tab-pane" aria-selected="false">Playlist</button>
				</li>
			</ul>

			<!-- Tab Content -->
			<div class="tab-content pt-4" id="myTabContent">
				<!-- Photo Tab Content -->
				<div class="tab-pane fade show active" id="photo-tab-pane" role="tabpanel" aria-labelledby="photo-tab" tabindex="0">
					@if (photos != null && photos.Any())
					{
						@foreach (var photo in photos)
						{
							<div class="card card-custom mb-5 w-80 border-gray">
								@if (!string.IsNullOrEmpty(photo.PhotoName))
								{
									var imageUrl = $"https://localhost:7060/uploads/post/{@photo.PhotoName}";
									<img src="@imageUrl" class="card-img-top" />
								}
								else
								{
									<img src="/images/lana2 (1).jpeg" class="card-img-top" />
								}
								<div class="card-body">
									<h2 class="card-title">@photo.Title</h2>
									<p class="card-text">@photo.Tags</p>
									<p class="card-text">
										<small class="text-secondary">
											Added date: @photo.CreatedAt.ToString("MMMM dd, yyyy")
										</small>
									</p>
									@* <button class="btn btn-primary" @onclick="() => FollowUser(photo.UserId)">Follow</button> *@
									<div class="mt-4">
										<h4>Add Comment</h4>
										<textarea class="form-control" placeholder="Enter your comment" @bind=comment></textarea>
										<button class="btn btn-primary mt-2" @onclick="() => PostComment(photo.Id,1)">Add Comment</button>


									</div>

								</div>
							</div>
						}
					}
					else
					{
						<p class="text-muted"><em>No image found.</em></p>
					}
				</div>

				<!-- Blog Tab Content -->
				<div class="tab-pane fade" id="blog-tab-pane" role="tabpanel" aria-labelledby="blog-tab" tabindex="0">
					@if (blogs != null && blogs.Any())
					{
						@foreach (var blog in blogs)
						{
							<div class="card card-custom mb-5 w-80 border-gray">
								@if (!string.IsNullOrEmpty(blog.PhotoName))
								{
									var imageUrl = $"https://localhost:7060/uploads/blog/{@blog.PhotoName}";
									<img src = "@imageUrl" class="card-img-top" />
								}
								else
								{
									<img src="/images/Weeknd.jpeg" class="card-img-top" />
								}
								<div class="card-body">
									<h2 class="card-title">@blog.Title</h2>
									<p class="card-text">@blog.Content</p>
									<p class="card-text">
										<small class="text-secondary">
											Added Date: @blog.CreatedAt.ToString("MMMM dd, yyyy")
										</small>
									</p>
								@* 	<button class="btn btn-primary" @onclick="() => FollowUser(blog.UserId)">Follow</button> *@
								</div>
							</div>
						}
					}
					else
					{
						<p class="text-muted"><em>No blogs found.</em></p>
					}
				</div>

				<!-- Playlist Tab Content -->
				<div class="tab-pane fade" id="playlist-tab-pane" role="tabpanel" aria-labelledby="playlist-tab" tabindex="0">
					@if (playlists != null && playlists.Any())
					{
						@foreach (var playlist in playlists)
						{
							<div class="card card-custom mb-5 w-80 border-gray">
							
									<img src="/images/Weeknd.jpeg" class="card-img-top" />
								
								<div class="card-body">
									<h2 class="card-title">@playlist.Title</h2>
									<p class="card-text">
										<small class="text-secondary">
											@* Added Date: @blog.CreatedAt.ToString("MMMM dd, yyyy") *@
										</small>
									</p>
									@* 	<button class="btn btn-primary" @onclick="() => FollowUser(blog.UserId)">Follow</button> *@
								</div>
							</div>
						}
					}
					else
					{
						<p class="text-muted"><em>No blogs found.</em></p>
					}
				</div>
			</div>
		</div>

		<!-- Sidebar -->
		<div class="col-md-3 side-section p-5">
			<div class="playlist border-gray">
				<h4 class="text-secondary">My Playlist <i class="fas fa-music"></i></h4>
				<!-- My playlist content here -->
			</div>
			<div class="playlist border-gray mt-5">
				<h4 class="text-secondary">My Photos <i class="fas fa-image"></i></h4>
				<!-- My photos content here -->
			</div>
		</div>
	</div>
</div>

<!-- Blog Modal -->
<div class="modal fade" id="blogModal" tabindex="-1" aria-labelledby="blogModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content bg--secondary">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Create blog</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<!-- Form for creating a blog -->
				<form @onsubmit="CreateBlog" enctype="multipart/form-data">
					<div class="mb-3">
						<label class="form-label">Title</label>
						<input class="form-control" placeholder="Title" @bind="newBlog.Title" required />
					</div>
					<div class="mb-3">
						<label class="form-label">Content</label>
						<textarea class="form-control" placeholder="Content" @bind="newBlog.Content" required></textarea>
					</div>
					<div class="mb-3">
						<label for="photo" class="form-label">Upload Image</label>
						<InputFile OnChange="@OnInputBlogUpload" class="form-control" id="fileUpload" />
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button type="submit" class="btn btn-primary">Create Blog</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Photo Modal -->
<div class="modal fade " id="photoModal" tabindex="-1" aria-labelledby="photoModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content bg--secondary">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Upload Image</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<!-- Form for creating a blog -->
				<form @onsubmit="UploadImage" enctype="multipart/form-data">
					<div class="mb-3">
						<label class="form-label">Caption</label>
						<input class="form-control" placeholder="Caption" @bind="newPhoto.Title" required />
					</div>
					<div class="mb-3">
						<label class="form-label">Tags</label>
						<input class="form-control" placeholder="Tags" @bind="newPhoto.Tags" required></input>
					</div>
					<div class="mb-3">
						<label for="photo" class="form-label">Upload Image</label>
						<InputFile OnChange="@OnInputPhotoUpload" class="form-control" id="fileUpload" />
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button type="submit" class="btn btn-primary">Upload</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>


@code {
	private List<Blog> blogs;
	private List<Playlist> playlists;

	private Blog newBlog = new Blog();
	private List<Photo> photos;
	private Photo newPhoto = new Photo();

	private string comment = "";


	// [Inject]
	// private AuthenticationStateProvider _authenticationStateProvider { get; set; }

	// [Inject]
	// private ILocalStorageService _localStorageService { get; set; }

	public class Blog
	{
		public int Id { get; set; }

		public string Title { get; set; }
		public string Content { get; set; }
		public string PhotoName { get; set; }
		public DateTime CreatedAt { get; set; }
		public string UserId { get; set; }

	}

	public class Photo
	{
		public int Id { get; set; }

		public string Title { get; set; }
		public string Tags { get; set; }
		public string PhotoName { get; set; }
		public DateTime CreatedAt { get; set; }
		public string UserId { get; set; }
	}

	public class Playlist
	{
		public int Id { get; set; }
		public string Title { get; set; }
		public Guid UserId { get; set; }
		public string UserName { get; set; }
	}

	public class Follow
	{
		public Guid UserId { get; set; }
	}


	protected override async Task OnInitializedAsync()
	{
		await LoadBlogs();
		await LoadImage();
		await LoadPlaylist();

	}

	private async Task LoadBlogs()
	{
		blogs = await _apiService.CallApiAsync<List<Blog>>("Blog/GetAllBlogs", HttpMethod.Get);
	}

	private async Task LoadImage()
	{
		photos = await _apiService.CallApiAsync<List<Photo>>("Photo/GetAllPhotos", HttpMethod.Get);
	}

	private async Task LoadPlaylist()
	{
		playlists = await _apiService.CallApiAsync<List<Playlist>>("Playlist/GetAllPlaylist", HttpMethod.Get);
	}

	private async Task  PostComment(int id, int contentType)
	{
		var typeVal = "";
		if(contentType == 1)
		{
			typeVal = "Photo";
		}
		var obj = new
		{
			PostId = id,
			PostType = typeVal,
			Content = comment
		};
		var res = await _apiService.CallApiAsync<Object>("Comment/PostComment", HttpMethod.Post, obj);
	}

	private async Task CreateBlog()
	{
		if (!string.IsNullOrEmpty(newBlog.PhotoName))
		{
			await UploadPhoto();
		}

		await _apiService.CallApiAsync<Blog>("Blog/PostBlogs", HttpMethod.Post, newBlog);
		await LoadBlogs();

		newBlog = new Blog();  
	}

	private async Task UploadImage()
	{
		await _apiService.CallApiAsync<Photo>("Photo/insertPic", HttpMethod.Post, newPhoto);

		await LoadImage();

		newPhoto = new Photo();

	}

	// public async Task FollowUser(string userId)
	// {
	// 	var convertedUserId = Guid.Parse(userId); // Convert string to Guid

	// 	// Create a model object to send to the API
	// 	var followRequest = new Follow { UserId = convertedUserId };

		
	// 		// Make an HTTP POST request to the API endpoint
	// 		var response = await _apiService.CallApiAsync<Follow>("Follow/FollowUser", followRequest);
		
	// }

	

    private async Task UploadPhoto()
    {
        var fileContent = new MultipartFormDataContent();
        fileContent.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes(newBlog.PhotoName))), "file", "blogImage.jpg");
        var response = await Http.PostAsync("https://localhost:7060/api/File/upload", fileContent);
        if (response.IsSuccessStatusCode)
        {
          
        }
        else
        {
           
        }
    }

	private async Task UploadPhotoForPost()
	{
		var fileContent = new MultipartFormDataContent();
		fileContent.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes(newPhoto.PhotoName))), "file", "photo.jpg");
		var response = await Http.PostAsync("https://localhost:7060/api/File/upload", fileContent);
		if (response.IsSuccessStatusCode)
		{

		}
		else
		{

		}
	}

    private async Task OnInputBlogUpload(InputFileChangeEventArgs e)
    {
        using var formData = new MultipartFormDataContent();

        var file = e.File;

        var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

		formData.Add(content: fileContent, name: "File", fileName: file.Name);

		formData.Add(new StringContent("1"), "FilePath");

		var response = await Http.PostAsync("https://localhost:7060/api/File/upload", formData);

		if (response.IsSuccessStatusCode)
		{
			var uploadedResult = await response.Content.ReadAsStringAsync();

			newBlog.PhotoName = uploadedResult ?? "";
		}
	}

	private async Task OnInputPhotoUpload(InputFileChangeEventArgs e)
	{
		using var formData = new MultipartFormDataContent();

		var file = e.File;

		var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

		fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

		formData.Add(content: fileContent, name: "File", fileName: file.Name);

		formData.Add(new StringContent("3"), "FilePath");

		var response = await Http.PostAsync("https://localhost:7060/api/File/upload", formData);

		if (response.IsSuccessStatusCode)
		{
			var uploadedResult = await response.Content.ReadAsStringAsync();

			newPhoto.PhotoName = uploadedResult ?? "";
		}
	}


	[Inject]
	private NavigationManager NavigationManager { get; set; }

	private void NavigateToPlaylistPage()
	{
		NavigationManager.NavigateTo("/playlist");
	}
}

<script>
	ClassicEditor
		.create(document.querySelector('#editor'))
		.then(editor => {
			console.log(editor);
			editor.ui.getEditableElement().style.backgroundColor = 'lightgray';

			// Change text color
			editor.ui.getEditableElement().style.color = 'blue';
		})
		.catch(error => {
			console.error(error);
		});
</script>