@page "/login"
@using EventSpaceUI.Client.Utilities
@inject HttpClient HttpClient
@inject IApiService _apiService
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid p-0">
    <!----------------------- Login Container -------------------------->
    <div class="row justify-content-center align-items-center min-vh-100">
        <div class="col-md-8">
            <div class="row border rounded-5 p-3 bg-dark shadow box-area ">
                <!--------------------------- Left Box ----------------------------->
                <div class="col-md-6 rounded-4 d-flex justify-content-center align-items-center flex-column left-box">
                    <div class="featured-image mb-3">
                        <img src="images/vector2.png" class="img-fluid rounded-start" style="width: 80%;" alt="...">
                    </div>
                    <h3 class="text-white fs-3">Hello, Again</h3>
                    <small class="text-secondary text-center" style="width: 17rem;">Join experienced Designers on this platform.</small>
                </div>
                <!--------------------------- Right Box ----------------------------->
                <div class="col-md-6 right-box">
                    <div class="row align-items-center">
                        <div class="header-text text-center mb-4 text-white">
                            <h2>Login</h2>
                            <p>We are happy to have you back.</p>
                        </div>
                        <form @onsubmit="LoginUser" class="w-100">
                            <div class="input-group mb-3">
                                <input type="text" class="form-control form-control-lg bg-light fs-6" placeholder="Email address" @bind="loginModel.Email">
                            </div>
                            <div class="input-group mb-3">
                                <input type="@passwordInputType" class="form-control form-control-lg bg-light fs-6" placeholder="Password" @bind="loginModel.Password">
                                <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                                    <i class="fas fa-eye"></i>
                                </button>
                            </div>
                           @*  <div class="input-group mb-4 d-flex justify-content-between align-items-center">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="formCheck" @bind="loginModel.RememberMe">
                                    <label for="formCheck" class="form-check-label text-secondary"><small>Remember Me</small></label>
                                </div>
                            </div> *@
                            <div class="input-group mb-3">
                                <button type="submit" class="btn btn-lg btn-danger w-100 fs-6">Login</button>
                            </div>
                            <div class="row">
                                <small class="text-white-50">Don't have account? <a href="/register" class="text-info">Sign Up</a></small>
                            </div>
                        </form>
                        @if (!string.IsNullOrEmpty(loginResultMessage))
                        {
                            <p class="text-center mt-3 text-white">@loginResultMessage</p>
                        }
                        @if (!string.IsNullOrEmpty(token))
                        {
                            <p class="text-center mt-3 text-white">JWT Token: @token</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private LoginModel loginModel = new LoginModel();
    private string loginResultMessage;
    private string token;
    private bool showPassword = false;
    private string passwordInputType = "password";
    private ClaimsPrincipal User { get; set; }
    private string Role = "";

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        // public bool RememberMe { get; set; } = true;
    }

    public class LoginResponseDto
    {
        public string Message { get; set; }
        public string Token { get; set; }
    }



    private async Task LoginUser()
    {
        var endpoint = "Account/login";
        var response = await _apiService.Login(loginModel);

        if (response.message == "Login successful")
        {

            loginResultMessage = response.message;
            await ((CustomAuthStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();

            navManager.NavigateTo("/eventIndex");
            // await jsRuntime.InvokeVoidAsync("toastr.success", "Login Successful!");


            // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            // User = authState.User;
            // var roles = User.Claims
            //     .Where(c => c.Type == ClaimTypes.Role)
            //     .Select(c => c.Value)
            //     .ToList();
            // Role = roles.FirstOrDefault();

            if (response.role == "Admin")
            {

                navManager.NavigateTo("/admin/dashboard");
            }
            else if(response.role == "Organizer"){
                navManager.NavigateTo("/organizer/dashboard");
            }
            else
            {
                navManager.NavigateTo("/eventIndex");

            }
            await jsRuntime.InvokeVoidAsync("toastr.success", "Login Successful!");

    

       
        }
        else
        {
            // Login failed
            loginResultMessage = response.message;
            await jsRuntime.InvokeVoidAsync("toastr.error", "Login Failed", "Invalid Login");
        }
    }

    private void TogglePasswordVisibility()
    {
        passwordInputType = showPassword ? "password" : "text";
        showPassword = !showPassword;
    }
}
