@page "/eventform"

@using EventSpaceUI.Client.Utilities
@using System.ComponentModel.DataAnnotations
@using System.Text
@inject HttpClient Http
@inject IApiService _apiService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

@layout AdminLayout

<div class="p-5 container-fluid mt-2">
    <div class="card mt-3" style="max-width: 600px; margin: 0 auto;">
        <div class="card-body">
            <h2 class="card-title text-center mb-4 text-white">Event Registration Form</h2>
            <form @onsubmit="CreateEvent">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="eventName" class="form-label text-white">Event Name</label>
                        <input type="text" class="form-control form-control-sm" id="eventName" @bind="newEvent.Name" required />
                    </div>
                    <div class="col-md-6">
                        <label for="eventVenue" class="form-label text-white">Venue</label>
                        <input type="text" class="form-control form-control-sm" id="eventVenue" @bind="newEvent.Venue" required>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="eventDate" class="form-label text-white">Date</label>
                        <input type="date" class="form-control form-control-sm" id="eventDate" @bind="newEvent.Date" required>
                    </div>
                    <div class="col-md-6">
                        <label for="eventArtist" class="form-label text-white">Artist</label>
                        <input type="text" class="form-control form-control-sm" id="eventArtist" @bind="newEvent.Artist" required>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">

                    <select class="form-select" @onchange="HandleSelectChange">
                            <option value="" selected disabled>Select Event Type</option>

                        <option value="0">Free</option>
                        <option value="2">Paid</option>
                        <option value="1">

                        </option>
                    </select>
                </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="startingPrice" class="form-label text-white">Starting Price</label>
                        <input type="number" class="form-control form-control-sm" id="startingPrice" @bind="newEvent.StartingPrice" disabled="@(newEvent.EventType == 0)">
                    </div>
                    <div class="col-md-6">
                        <label for="totalSeats" class="form-label text-white">Total Seats</label>
                        <input type="number" class="form-control form-control-sm" id="totalSeats" @bind="newEvent.TotalSeats" required>
                    </div>
                </div>
           

                <div class="row mb-3">
                    <div class="col-md-12">
                        <label for="photo" class="form-label text-white">Upload Image</label>
                        <InputFile OnChange="@OnInputPhotoUpload" class="form-control" id="fileUpload" />
                    </div>
                </div>
                <!-- Tier Details -->

                @if(newEvent.EventType != 0)
                {
                <h4 class="mt-3 mb-2 text-center text-white">Tier Details</h4>
                <div class="mb-3 d-flex justify-content-end">
                    <button type="button" class="btn btn-sm btn-outline-success" @onclick="AddTier">Add Tier</button>
                </div>
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="tierName" class="form-label text-white">Tier Name</label>
                    </div>
                    <div class="col-md-3">
                        <label for="tierPrice" class="form-label text-white">Tier Price</label>
                    </div>
                    <div class="col-md-3">
                        <label for="tierSeats" class="form-label text-white">Seats</label>
                    </div>
                    <div class="col-md-2"></div> 
                </div>


                @foreach (var tier in newEvent.TierList)
                {
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <input type="text" class="form-control form-control-sm" @bind="tier.Name" required>
                        </div>
                        <div class="col-md-3">
                            <input type="number" class="form-control form-control-sm" @bind="tier.Price" required>
                        </div>
                        <div class="col-md-3">
                            <input type="number" class="form-control form-control-sm" @bind="tier.TotalSeats" required>
                        </div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveTier(tier)">Remove</button>
                        </div>
                    </div>
                }
                }


                <div class="d-flex justify-content-center">
                    <button type="submit" class="registerbtn">Register</button>
                </div>
            </form>
        </div>
    </div>
</div>


@code {
    private EventRequestDTO newEvent = new EventRequestDTO();

    public class EventResponseDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Venue { get; set; }
        public DateTime Date { get; set; }
        public string Artist { get; set; }
        public decimal StartingPrice { get; set; }
        public int TotalSeats { get; set; }
        public int AvailableSeats { get; set; }

        public string EventPhoto { get; set; }
        public string Type { get; set; }

        public List<TierRequestDTO> TierList { get; set; } = new List<TierRequestDTO>();
    }



    public class EventRequestDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Venue { get; set; }
        public DateTime Date { get; set; }
        public string Artist { get; set; }
        public decimal StartingPrice { get; set; }
        public int TotalSeats { get; set; }
        public int AvailableSeats { get; set; }

        public string EventPhoto { get; set; }
        public int EventType { get; set; } = 2;

        public List<TierRequestDTO> TierList { get; set; } = new List<TierRequestDTO>();
    }
    public class TierRequestDTO
    {
        public int? Id { get; set; }

        public string? Name { get; set; }
        public int TotalSeats { get; set; }
        public int Price { get; set; }
        public int? AvailableSeats { get; set; }
    }

    public class TierDTO
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public int TotalSeats { get; set; }
        public int AvailableSeats { get; set; }

        public int Price { get; set; }
        public int AmountRaised { get; set; }
        public int EventId { get; set; }
    }

    private void AddTier()
    {
        newEvent.TierList.Add(new TierRequestDTO());
    }
    private void RemoveTier(TierRequestDTO tier)
    {
        newEvent.TierList.Remove(tier);
    }

    private void HandleSelectChange(ChangeEventArgs e)
    {
        Console.WriteLine($"Selected value: {e.Value}");
        if (int.TryParse(e.Value.ToString(), out int selectedValue))
        {
            newEvent.EventType = selectedValue;
        }
    }

	private async Task CreateEvent()
	{
		try
		{
            if (!string.IsNullOrEmpty(newEvent.EventPhoto))
            {
                await UploadPhoto();
            }
			// Send newEvent as payload
			var createdEvent = await _apiService.CallApiAsync<EventResponseDTO>("Event/CreateEvent", HttpMethod.Post, newEvent);
			Console.WriteLine("Event created successfully.");
			await jsRuntime.InvokeVoidAsync("toastr.success", "Event created Successful!");
			NavigationManager.NavigateTo("/eventindex");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"An error occurred while creating the event: {ex.Message}");
			await jsRuntime.InvokeVoidAsync("toastr.error", "Event Registration failed", "Invalid registration");
			throw;
		}
	}

    private async Task UploadPhoto()
    {
        var fileContent = new MultipartFormDataContent();
        fileContent.Add(new StreamContent(new MemoryStream(Encoding.UTF8.GetBytes(newEvent.EventPhoto))), "file", "eventImage.jpg");
        var response = await Http.PostAsync("https://localhost:7060/api/File/upload", fileContent);
        if (response.IsSuccessStatusCode)
        {

        }
        else
        {

        }
    }
    private async Task OnInputPhotoUpload(InputFileChangeEventArgs e)
    {
        using var formData = new MultipartFormDataContent();

        var file = e.File;

        var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

        formData.Add(content: fileContent, name: "File", fileName: file.Name);

        formData.Add(new StringContent("2"), "FilePath");

        var response = await Http.PostAsync("https://localhost:7060/api/File/upload", formData);

        if (response.IsSuccessStatusCode)
        {
            var uploadedResult = await response.Content.ReadAsStringAsync();

            newEvent.EventPhoto = uploadedResult ?? "";
        }
    }
} 


