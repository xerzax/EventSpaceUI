@page "/ticket/{EventId}/{tierId}"
@using EventSpaceUI.Client.Utilities
@using static EventSpaceUI.Client.Pages.Event.EventForm
@inject HttpClient HttpClient
@inject IApiService _apiService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime


<div class="container pt-5">

	<div class="row p-5 pt-4">
		<div class="col-6 bg--secondary p-5 border-curved">
			<input type="hidden" id="tierId" value="@tier.Id" />
			<div class="pb-5">
				<h3 class="pt-4"><span>Tier type:</span> @tier.Name</h3>
				<h3 class="pt-4"><span>Price per seat:</span> <span id="price">@tier.Price</span></h3>
			</div>
			<input type="hidden" id="tierSeats" value="@tier.AvailableSeats" />
			<div class="pb-5">
				<input type="number" @bind="ticketQuantity" class="form-control" placeholder="Enter number of tickets" @onblur="CalculateTotal" />
			</div>

			<div>
				<input type="radio" name="purchaseType" checked="@IsGifted" @onchange="@(e => IsGifted = true)" /> Gift
				<input type="radio" name="purchaseType" checked="@(!IsGifted)" @onchange="@(e => IsGifted = false)" /> Purchase for self
			</div>

			<div class="pt-4 d-grid gap-2">
				@if (IsGifted)
				{
					<button type="button" id="proceedBtn" class="btn btn-main btn-main-fill" data-bs-toggle="modal" data-bs-target="#ticketModal">Proceed</button>
				}
				@if (!IsGifted)
				{
					<button @onclick="dummyPay" class="btn btn-main btn-main-fill w-100 fs-6" id="payment-button">Pay with Khalti</button>
				}
			</div>
		</div>

		<div class="col-1">
			<div class="divider-evt"></div>
		</div>

		<div class="col-5">
			<div id="ticketDetails" class="p-5" style="border: 1px dashed white">
				<div class="d-flex justify-content-between fs--normal">
					<div>Price</div>
					<div>Qty</div>
					<div>Total</div>
				</div>
				<div class="d-flex justify-content-between pt-5">
					<div>@tier.Price</div>
					<div>@ticketQuantity</div>
					<div>@totalPrice</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="ticketModal" tabindex="-1" aria-labelledby="ticketModalLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content bg--primary border-white">
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="eventModalLabel">Ticket confirmation</h1>
					<button type="button" class="btn-close bg-white" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="pt-3"><span>Tier type:</span> @tier.Name</div>
					<div class="pt-3"><span>Price per seat:</span> <span id="confirmPrice">@tier.Price</span></div>
					<div class="pt-3">Total: NPR. @totalPrice</div>
					<input type="email" class="form-control d-block mt-3" id="receiverEmail" placeholder="Enter receiver email" @bind="model.Email"/>
					<button id="payment-button" class="btn btn-success mt-4" @onclick="dummyPay">Pay with Khalti</button>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private TierDTO tier = new TierDTO();
	private TicketModel newTicket = new TicketModel();
	private EventResponseDTO SelectedEvent;
	private List<EventResponseDTO> Events;
	private int ticketQuantity = 0;
	private decimal totalPrice = 0;

	private bool IsGifted { get; set; } = false;
	private PaymentRequestDTO model = new PaymentRequestDTO();
	public class PaymentResponse
	{
		public string pidx { get; set; }
		public string payment_url { get; set; }
		public DateTime expires_at { get; set; }
		public int expires_in { get; set; }
		public int user_fee { get; set; }
	}


	public class PaymentRequestDTO
	{

		public int? TierId { get; set; }

		public int EventId { get; set; }

		public int Qty { get; set; }
		public string Email { get; set; }


	}

	private async Task dummyPay()
	{
		var endpoint = "Ticket/Payment";

		model.EventId = int.Parse(EventId);

		model.TierId = int.Parse(TierId);
		model.Qty = ticketQuantity;

		var res = await _apiService.CallApiAsync<PaymentResponse>(endpoint, HttpMethod.Post,model);
		if (res != null)
		{
			NavigationManager.NavigateTo(res.payment_url);
		}
	}

	[Parameter]
	public string TierId { get; set; }


	[Parameter]
	public string EventId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (!string.IsNullOrEmpty(TierId))
		{
			var endpoint = $"Event/GetTierById/{TierId}";
			tier = await _apiService.CallApiAsync<TierDTO>(endpoint, HttpMethod.Get);
		}
	}

	private void CalculateTotal()
	{
		totalPrice = tier.Price * ticketQuantity;
		StateHasChanged();
	}
	private async Task LoadEventDetails()
	{
		if (newTicket.EventID != 0)
		{
			SelectedEvent = Events.FirstOrDefault(e => e.Id == newTicket.EventID);
		}
	}

	private async Task PurchaseTicket()
	{
		try
		{
			await LoadEventDetails();
			var createdEvent = await _apiService.CallApiAsync<TicketModel>("Ticket/buy-tickets", HttpMethod.Post, newTicket);
			Console.WriteLine("Ticket purchased successfully.");
			await jsRuntime.InvokeVoidAsync("toastr.success", "Tickets purchase successful!");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"An error occurred while purchasing the ticket: {ex.Message}");
			await jsRuntime.InvokeVoidAsync("toastr.error", "Ticket purchase failed");
		}
	}
	public class TicketModel
	{
		public int Qty { get; set; }
		public string TierName { get; set; }
		public int EventID { get; set; }
	}
}







